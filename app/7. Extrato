from fastapi import APIRouter, Depends, HTTPException
from app.database import get_db
from app.models import Account, Transaction
from app.schemas import AccountOut, TransactionOut
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

router = APIRouter()

@router.get("/accounts/{account_id}/statement", response_model=AccountOut)
async def statement(account_id: int, db: AsyncSession = Depends(get_db)):
    result = await db.execute(select(Account).where(Account.id == account_id))
    account = result.scalar_one_or_none()

    if not account:
        raise HTTPException(status_code=404, detail="Account not found")
    
    result = await db.execute(select(Transaction).where(Transaction.account_id == account_id))
    transactions = result.scalars().all()
    
    return AccountOut(
        id=account.id,
        balance=account.balance,
        transactions=[TransactionOut.from_orm(t) for t in transactions]
    )
